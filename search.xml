<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>黑草记忆</title>
      <link href="/2023/04/15/%E9%BB%91%E8%8D%89%E8%AE%B0%E5%BF%86/"/>
      <url>/2023/04/15/%E9%BB%91%E8%8D%89%E8%AE%B0%E5%BF%86/</url>
      
        <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>黑草记忆</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-04-15</p></div></div><div class='timeline-item-content'><p>真是不像话啊，居然从上周躺到现在，除了上课甚至没怎么出过宿舍。整整一周的时间，看完了黑草的170话内容。这一星期的相遇，却是让我感触颇深的一周。我开始对眼前的生活感到困惑，我不明白是否将来真的会是我想要的未来，一个应该充满希望和欢乐的未来。或许是我真的孤独了，远离家人朋友，身边只是能说上几句话的人。没有人有义务一直倾听你的倾诉，你想分享的很多很多话，就算是家人朋友也不能。我开始迷茫，手足无措，该去学习了？没事的，反正期末前抓抓紧就行，毕竟从小到大我都是那种放纵自己的人，学习这玩意该学学该玩玩……话说这些真的是我想要的吗？未来好似充满着不确定，有些人忙着去干一件件事，到处折腾，这就是所谓的内卷吗？我对此，好像没有兴趣啊。</p><p>周五的那个傍晚，躺在床上的我点开了虽然一直想看却又没有付诸行动的动漫。一个没有魔法却想成为魔法帝的少年吗？好老套的开局，不过我喜欢。渐渐地，我发现我喜欢上了里面的每一个角色，他们每个人都有些有肉，有自己的故事。黑色爆牛的伙伴，真是令人羡慕呢。“永不放弃就是我的魔法”，我看着他们一次次被强大的对手打倒，却一次次不断超越自己的极限，有自身的成长，有伙伴的扶持，有梦想的支撑……这种一往无前的笨蛋果然才最为吸引我呢。一群看来不被社会所接受的“异类”，最垃圾的魔法骑士团，却在这里找到了归属。除了那极致的黑，极致的恶不容宽恕，我也能共情其中的大多数角色，果然我还是希望每个人能有一个好的结局。就算是日常生活的描写也能令人忍俊不禁，幽默诙谐，真美好呢。“就算穷酸也好，弃儿也罢，都是能成为魔法帝的”，阿斯塔特别就特别在他总能坚持自身的梦想，没有天赋，那就加倍努力，没有希望，就向那该死的命运说不。头脑里长满肌肉的热血笨蛋可不会管那么多。</p><p>说起来，我也该回到原本的生活中去了，即使现在还有困惑，还在路口徘徊，不过向前走总是好的，也许有一天我也会找到属于自己的黑色爆牛，有那样的团长和前辈，那样一群相互扶持向前的“对手”。</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
            <tag> 少年记忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bochs安装</title>
      <link href="/2023/03/24/Bochs%E5%AE%89%E8%A3%85/"/>
      <url>/2023/03/24/Bochs%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Bochs安装"><a href="#Bochs安装" class="headerlink" title="Bochs安装"></a>Bochs安装</h1><p><strong>谨以此篇博客记录长达一个星期之久的bochs安装之旅</strong></p><p>实测Ubuntu18.04及Ubuntu20.04均可通过自带软件仓库顺利安装并使用，安装指令，远离折腾烦恼</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install bochs bochs-x</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>选用系统：debian11<br>debian11自带软件仓库按理来说也是可以通过以上命令进行安装的，要是如此简单恐怕一分钟就可以完结收工了，可偏偏事与愿违。<br>助教进行实验讲解时就说了，Ubuntu22.04会出现问题，如<a href="https://stackoverflow.com/questions/73067357/bochs-can-not-load-bootloader-using-a-floppy-image">这个链接</a>所示，表明了其Ubuntu22.04安装软件仓库中自带的Bochs2.7所遭遇的问题，无法正常启动。</p><p>先前也没当回事，毕竟debian以稳定著称，想必包管理器中所提供的应该是较为稳定可以运行的版本。可等我敲完命令，竟也遭遇了相同的问题。Bochs无论输入多少次c,始终没有输出期许的结果，可以看到以下报错<br><img src="https://s2.loli.net/2023/03/23/SRc8Lj6CIPHXQN9.png" alt="problem1.png"><br><img src="https://s2.loli.net/2023/03/23/wt4l5oJkajfTOnc.png" alt="problem2.png"><br>真奇怪，明明Bochs的版本是2.6.11，看来不只是2.7版本存在问题，2.6.11同样存在问题</p><p><img src="https://s2.loli.net/2023/03/24/ad2EmbsJjGBYtR3.png" alt="problem4.png"></p><p>试了很多次，看来依靠本来的包管理器是不行了，只能尝试自己下载编译一份了。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="官网下载2-7版本"><a href="#官网下载2-7版本" class="headerlink" title="官网下载2.7版本"></a>官网下载2.7版本</h3><p><a href="https://sourceforge.net/projects/bochs/files/bochs/2.7/bochs-2.7.tar.gz/download">https://sourceforge.net/projects/bochs/files/bochs/2.7/bochs-2.7.tar.gz/download</a></p><p>进入下载的目标目录，比如我这里就是“下载”目录，打开终端执行解压缩</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf bochs-2.7.tar.gz</span><br></pre></td></tr></table></figure><p>获得解压后的文件夹bochs-2.7</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxx@debian:~/下载$ <span class="built_in">ls</span></span><br><span class="line">1-lexer-antlr.pdf        bochs-2.7</span><br><span class="line">2-lexer-re.pdf           bochs-2.7.tar.gz</span><br><span class="line">3-lexer-handwritten.pdf  code_1.76.2-1678817801_amd64.deb</span><br><span class="line">4-lexer-automata.pdf     google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>进入解压后文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> bochs-2.7</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/xxx/bochs --enable-debugger --enable-iodebug --enable-iodebug --enable-x86-debugger --with-x --with-x11</span><br><span class="line"><span class="comment"># xxx替换为自己的用户名即可</span></span><br></pre></td></tr></table></figure><p>原本看的教程是</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/xxx/bochs --enable-debugger --enable-disasm --enable-iodebug --enable-iodebug --enable-x86-debugger --with-x --with-x11</span><br></pre></td></tr></table></figure><p>但会报一个小的Warning</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: unrecognized options: --enable-disasm</span><br></pre></td></tr></table></figure><p>使用以下命令查看可选项</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure -<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>会发现2.7版本为</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--enable-show-ips       show IPS in Bochs status bar / log file (yes)</span><br><span class="line">--enable-cpp            use .cpp as C++ suffix (no)</span><br><span class="line">--enable-debugger       compile in support for Bochs internal debugger (no)</span><br><span class="line">--enable-debugger-gui   compile in support for Bochs internal debugger GUI</span><br><span class="line">                        (yes, if debugger is on)</span><br></pre></td></tr></table></figure><p>2.6.11对应位置为</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--enable-show-ips       show IPS in Bochs status bar / log file (yes)</span><br><span class="line">--enable-cpp            use .cpp as C++ suffix (no)</span><br><span class="line">--enable-debugger       compile in support for Bochs internal debugger (no)</span><br><span class="line">--enable-disasm         compile in support for disassembler (no)</span><br><span class="line">--enable-debugger-gui   compile in support for Bochs internal debugger GUI</span><br><span class="line">                        (yes, if debugger is on)</span><br></pre></td></tr></table></figure><p>正好缺少–enable-disasm选项，也不知道什么情况，可能已经不是可选项了？还是写文档疏忽大意了？</p><p>确保你的操作系统已经安装有gcc,g++，查看方式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p>没有则使用如下命令进行安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>没有报错继续执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p>当然你可能碰到许多奇奇怪怪的报错，我也一样，这里是我所参考的教程<br><a href="https://zhuanlan.zhihu.com/p/35437842">https://zhuanlan.zhihu.com/p/35437842</a> 很多可能的报错也都指出了。</p><p>要说这篇文章没被解决的问题，倒是有一个<br><img src="https://s2.loli.net/2023/03/24/S9cFeRqgGnvAxko.png" alt="problem5.png"></p><p>如上图所示，不过也找到了解决方法</p><p>额，想复现错误好像不行了，原本的解决方法是要更改某.cc文件的头文件的，好奇怪。而且重新看了参考的教程，其实该问题很有可能是上面某问题的一种表现形式。</p><p>至此安装就算完成了，可以查看一下文件存放的位置，如果都是按照我的步骤来的话，应该会看到用户目录下多出一个bochs目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxx@debian:~/桌面$ <span class="built_in">cd</span></span><br><span class="line">xxx@debian:~$ <span class="built_in">ls</span></span><br><span class="line">公共  模板  视频  图片  文档  下载  音乐  桌面  bochs</span><br><span class="line">xxx@debian:~$ <span class="built_in">cd</span> bochs</span><br><span class="line">xxx@debian:~/bochs$ <span class="built_in">ls</span></span><br><span class="line">bin  share</span><br></pre></td></tr></table></figure><p>验证安装成功</p><p>随便打开一个终端，敲入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/xxx/bochs/bin/bochs</span><br><span class="line"><span class="comment"># xxx处填用户名</span></span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">========================================================================</span><br><span class="line">                        Bochs x86 Emulator 2.7</span><br><span class="line">              Built from SVN snapshot on August  1, 2021</span><br><span class="line">                Timestamp: Sun Aug  1 10:07:00 CEST 2021</span><br><span class="line">========================================================================</span><br></pre></td></tr></table></figure><p>至此安装成功</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>每次都得敲一长串命令，显然费时费力，将其设置别名也可直接添加到环境变量中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias bochs=&#x27;/home/xxx/bochs/bin/bochs&#x27;</span><br><span class="line">alias bximage=&#x27;/home/xxx/bochs/bin/bximage&#x27;</span><br></pre></td></tr></table></figure><p>立即生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>测试</p><p>随便在某一位置打开终端，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bochs</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">========================================================================</span><br><span class="line">                        Bochs x86 Emulator 2.7</span><br><span class="line">              Built from SVN snapshot on August  1, 2021</span><br><span class="line">                Timestamp: Sun Aug  1 10:07:00 CEST 2021</span><br><span class="line">========================================================================</span><br></pre></td></tr></table></figure><p>配置完成</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>创建软盘</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxx@debian:~/桌面/OS/lab1/t2$ bximage</span><br><span class="line">========================================================================</span><br><span class="line">                                bximage</span><br><span class="line">  Disk Image Creation / Conversion / Resize and Commit Tool <span class="keyword">for</span> Bochs</span><br><span class="line">         <span class="variable">$Id</span>: bximage.cc 14091 2021-01-30 17:37:42Z sshwarts $</span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line">1. Create new floppy or hard disk image</span><br><span class="line">2. Convert hard disk image to other format (mode)</span><br><span class="line">3. Resize hard disk image</span><br><span class="line">4. Commit <span class="string">&#x27;undoable&#x27;</span> redolog to base image</span><br><span class="line">5. Disk image info</span><br><span class="line"></span><br><span class="line">0. Quit</span><br><span class="line"></span><br><span class="line">Please choose one [0] 1</span><br><span class="line"></span><br><span class="line">Create image</span><br><span class="line"></span><br><span class="line">Do you want to create a floppy disk image or a hard disk image?</span><br><span class="line">Please <span class="built_in">type</span> hd or fd. [hd] fd</span><br><span class="line"></span><br><span class="line">Choose the size of floppy disk image to create.</span><br><span class="line">Please <span class="built_in">type</span> 160k, 180k, 320k, 360k, 720k, 1.2M, 1.44M, 1.68M, 1.72M, or 2.88M.</span><br><span class="line"> [1.44M] </span><br><span class="line"></span><br><span class="line">What should be the name of the image?</span><br><span class="line">[a.img] </span><br><span class="line"></span><br><span class="line">Creating floppy image <span class="string">&#x27;a.img&#x27;</span> with 2880 sectors</span><br><span class="line"></span><br><span class="line">The following line should appear <span class="keyword">in</span> your bochsrc:</span><br><span class="line">  floppya: image=<span class="string">&quot;a.img&quot;</span>, status=inserted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建boot.asm</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> boot.asm</span><br></pre></td></tr></table></figure><p>该文件中写入以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org 07c00h</span><br><span class="line">mov ax, cs</span><br><span class="line">mov ds, ax</span><br><span class="line">mov es, ax</span><br><span class="line">call DispStr</span><br><span class="line">jmp $</span><br><span class="line">DispStr:</span><br><span class="line">mov ax, BootMessage</span><br><span class="line">mov bp, ax</span><br><span class="line">mov cx, 16</span><br><span class="line">mov ax, 01301h</span><br><span class="line">mov bx, 000ch</span><br><span class="line">mov dl, 0</span><br><span class="line">int 10h</span><br><span class="line">ret</span><br><span class="line">BootMessage:db &quot;Hello, OS World&quot;</span><br><span class="line">times510-($-$$) db 0</span><br><span class="line">dw 0xaa55</span><br></pre></td></tr></table></figure><p>终端执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nasm boot.asm -o boot.bin</span><br></pre></td></tr></table></figure><p>写入软盘</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxx@debian:~/桌面/OS/lab1/t2$ <span class="built_in">dd</span> <span class="keyword">if</span>=boot.bin of=a.img bs=512 count=1 conv=notrunc</span><br><span class="line">记录了1+0 的读入</span><br><span class="line">记录了1+0 的写出</span><br><span class="line">512字节已复制，0.000373033 s，1.4 MB/s</span><br></pre></td></tr></table></figure><p>创建bochsrc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> bochsrc</span><br></pre></td></tr></table></figure><p>该文件写入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">megs: 32</span><br><span class="line">display_library: x</span><br><span class="line">floppya: 1_44=a.img, status=inserted</span><br><span class="line">boot: floppy</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxx@debian:~/桌面/OS/lab1/t2$ bochs -f bochsrc </span><br></pre></td></tr></table></figure><p>Please choose one: [6]<br>回车</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;bochs:1&gt; c</span><br><span class="line"><span class="comment"># 输入c回车</span></span><br></pre></td></tr></table></figure><p>成功<br><img src="https://s2.loli.net/2023/03/24/tarZcKEMXbT64iL.png" alt="success.png"></p><p>至此全部结束，我们已经成功在debian11上安装启动了Bochs</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2023/03/21/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/03/21/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>操作系统：Debian11 </p><p>数据库工具：MariaDB<br>Ver 9.1 Distrib 10.5.18-MariaDB, for debian-linux-gnu on x86_64</p><hr><p><strong>每条指令均以,作为结束标志</strong></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx@debian:~/桌面$ sudo mysql -u root -p</span><br><span class="line">[sudo] xxx 的密码：</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>成功登陆出现以下提示:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 31</span><br><span class="line">Server version: 10.5.18-MariaDB-0+deb11u1 Debian 11</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br></pre></td></tr></table></figure><p><strong>若是出现以下报错</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/run/mysqld/mysqld.sock&#x27; (2)</span><br></pre></td></tr></table></figure><p>考虑是不是数据库未开启，查看状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl status mariadb</span></span><br></pre></td></tr></table></figure><p>若是发现</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Status: &quot;MariaDB server is down&quot;</span><br></pre></td></tr></table></figure><p>表明数据库服务端已关闭，使用以下指令开启</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mariadb</span><br></pre></td></tr></table></figure><h2 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE xxx;</span><br></pre></td></tr></table></figure><p>实例：创建employees数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE employees;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><p>看看现在数据库有无变化</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> employees          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><p>成功创建employees数据库</p><h3 id="反复添加会如何"><a href="#反复添加会如何" class="headerlink" title="反复添加会如何"></a>反复添加会如何</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE employees;</span><br><span class="line">ERROR <span class="number">1007</span> (HY000): Can<span class="string">&#x27;t create database &#x27;</span>employees<span class="string">&#x27;; database exists</span></span><br></pre></td></tr></table></figure><p>ERROR,该数据库已存在</p><h2 id="数据库删除"><a href="#数据库删除" class="headerlink" title="数据库删除"></a>数据库删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE xxx;</span><br></pre></td></tr></table></figure><p>实例：删除employees数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">DROP</span> DATABASE employees;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据库选择"><a href="#数据库选择" class="headerlink" title="数据库选择"></a>数据库选择</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use xxx;</span><br></pre></td></tr></table></figure><p>实例：选择employees数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE employees;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> use employees;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> MariaDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/03/16/Git/"/>
      <url>/2023/03/16/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><div class="note info simple"><p>本部分参考CodeSheep：<a href="https://mp.weixin.qq.com/s/bUYz9JwqAYH_Fn6nHPSmTg">为什么 Git把 SVN拍在了沙滩上！</a></p></div><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史 [Git only]</span><br><span class="line">$ git clone </span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列举出所有配置</span><br><span class="line">$ git config -l</span><br><span class="line"></span><br><span class="line"># 为命令配置别名</span><br><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git config --global alias.br branch</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><h3 id="增删"><a href="#增删" class="headerlink" title="增删"></a>增删</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add &lt;file1&gt; &lt;file2&gt; ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括其子目录</span><br><span class="line">$ git add &lt;dir&gt;</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><p>注：把文件名 file1 添加到 .gitignore 文件里，Git 会停止跟踪 file1 的状态。<br><img src="https://s2.loli.net/2023/03/16/ehixqcgYkLrZV9w.png" alt="git1.png"></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [new_branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个 commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地分支，-D 参数强制删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push [remote] :[remote-branch]</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区与暂存区的变化直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有 diff 信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 提交暂存区修改到仓库区，合并到上次修改，并修改上次的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [remote-branch]</span><br></pre></td></tr></table></figure><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动 (Git only)</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库 (Git only)</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息 (Git only)</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名 (Git only)</span><br><span class="line">$ git remote add [remote-name] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并，(Git only)</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支变基合并，(Git only)</span><br><span class="line">$ git pull --rebase [remote] [branch]</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区当前目录的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 恢复工作区到指定 commit</span><br><span class="line">$ git checkout [commit]</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次 commit 保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定 commit，同时重置暂存区和工作区，与指定 commit 一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个 commit，用于撤销指定 commit</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 将未提交的变化放在储藏区</span><br><span class="line">$ git stash</span><br><span class="line"></span><br><span class="line"># 将储藏区的内容恢复到当前工作区</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看工作区文件修改状态</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 查看工作区文件修改具体内容</span><br><span class="line">$ git diff [file]</span><br><span class="line"></span><br><span class="line"># 查看暂存区文件修改内容</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"> </span><br><span class="line"># 查看版本库修改记录</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 查看某人提交记录</span><br><span class="line">$ git log --author=someone</span><br><span class="line"></span><br><span class="line"># 查看某个文件的历史具体修改内容</span><br><span class="line">$ git log -p [file]</span><br><span class="line">        </span><br><span class="line"># 查看某次提交具体修改内容</span><br><span class="line">$ git show [commit]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/03/12/Linux/"/>
      <url>/2023/03/12/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h1><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p><strong>在Linux的世界中，一切皆文件</strong></p><p>所有目录均在根目录下，每个目录中存放对应文件</p><p>硬件也会映射为文件形式</p><h4 id="x2F-bin"><a href="#x2F-bin" class="headerlink" title="&#x2F;bin"></a>&#x2F;bin</h4><p>存放最经常使用命令</p><h4 id="x2F-home"><a href="#x2F-home" class="headerlink" title="&#x2F;home"></a>&#x2F;home</h4><p>存放普通用户主目录，每个Linux用户有一个自己的目录</p><h4 id="x2F-root"><a href="#x2F-root" class="headerlink" title="&#x2F;root"></a>&#x2F;root</h4><p>该目录为系统管理员，超级权限者</p><h4 id="x2F-lib"><a href="#x2F-lib" class="headerlink" title="&#x2F;lib"></a>&#x2F;lib</h4><p>动态链接共享库，几乎所有程序都需使用</p><h4 id="x2F-etc"><a href="#x2F-etc" class="headerlink" title="&#x2F;etc"></a>&#x2F;etc</h4><p>所有系统管理所需要的配置文件和子目录</p><h4 id="x2F-usr"><a href="#x2F-usr" class="headerlink" title="&#x2F;usr"></a>&#x2F;usr</h4><p>许多程序和文件都放在该目录下，类似于Windows的Program files目录</p><h4 id="x2F-boot"><a href="#x2F-boot" class="headerlink" title="&#x2F;boot"></a>&#x2F;boot</h4><p>启动Linux时所需核心文件</p><h4 id="x2F-proc"><a href="#x2F-proc" class="headerlink" title="&#x2F;proc"></a>&#x2F;proc</h4><p>系统内存映射</p><h4 id="x2F-srv"><a href="#x2F-srv" class="headerlink" title="&#x2F;srv"></a>&#x2F;srv</h4><h4 id="x2F-sys"><a href="#x2F-sys" class="headerlink" title="&#x2F;sys"></a>&#x2F;sys</h4><h4 id="x2F-tmo"><a href="#x2F-tmo" class="headerlink" title="&#x2F;tmo"></a>&#x2F;tmo</h4><p>临时文件</p><h4 id="x2F-dev"><a href="#x2F-dev" class="headerlink" title="&#x2F;dev"></a>&#x2F;dev</h4><p>类似于Windows设备管理器，将所有硬件映射为文件</p><h4 id="x2F-media"><a href="#x2F-media" class="headerlink" title="&#x2F;media"></a>&#x2F;media</h4><p>自动识别一些设备，如U盘、光驱等，识别后，Linux会将这些设备挂载到该目录（其实挺奇怪的，硬盘和U盘不都属于外设吗，怎么还区别对待？感觉有些问题）</p><h4 id="x2F-mnt"><a href="#x2F-mnt" class="headerlink" title="&#x2F;mnt"></a>&#x2F;mnt</h4><p>用以临时挂载别的文件系统</p><h4 id="x2F-opt"><a href="#x2F-opt" class="headerlink" title="&#x2F;opt"></a>&#x2F;opt</h4><p>安装软件所存放的目录（与usr区别？）安装包</p><h4 id="x2F-usr-x2F-local"><a href="#x2F-usr-x2F-local" class="headerlink" title="&#x2F;usr&#x2F;local"></a>&#x2F;usr&#x2F;local</h4><p>软件存放目录</p><h4 id="x2F-var"><a href="#x2F-var" class="headerlink" title="&#x2F;var"></a>&#x2F;var</h4><p>经常修改内容，包括各种日志文件</p><h4 id="x2F-selinux"><a href="#x2F-selinux" class="headerlink" title="&#x2F;selinux"></a>&#x2F;selinux</h4><p>安全子系统</p><h2 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h2><p>Linux公网</p><p>远程登陆、文件传输</p><p>学习阶段使用Xshell 7以及Xftp 7</p><p>官网为<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a>，不要找错了哦（差点踩坑被骗）</p><p>成功使用Xshell连接到Pine A64卡片电脑，实现远端控制</p><p><img src="https://s2.loli.net/2023/03/12/RX6YfLy9MC15wIv.png" alt="linux01.png"></p><p>实现过程：来电自启Pine A64，连接网线，进入路由器管理界面，找到已连接设备IP地址，查询Pine A64地</p><p>址，启动Xshell，输入对应IP地址，依次输入用户名及密码，远端登录成功！</p><h2 id="Vi及Vim的使用"><a href="#Vi及Vim的使用" class="headerlink" title="Vi及Vim的使用"></a>Vi及Vim的使用</h2><p>vim具有程序编辑能力</p><h3 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h3><h4 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h4><p>默认模式，可移动光标，使用删除、复制、粘贴</p><h4 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h4><p>按下i、I、o、O等字母进入编辑模式</p><h4 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h4><p>可以使用相关指令，完成读取、存盘、替换、离开等操作</p><h5 id="例：使用vim编写hello-c"><a href="#例：使用vim编写hello-c" class="headerlink" title="例：使用vim编写hello.c"></a>例：使用vim编写hello.c</h5><p>查看编辑器</p><p><img src="https://s2.loli.net/2023/03/12/ZADdpt6sJxEVb7o.png" alt="linux03.png"><br>armbian自带gcc和g++，<del>没有python和Java，</del>是有python3的，省事直接用gcc，编写hello.c</p><p>执行</p><p><img src="https://s2.loli.net/2023/03/12/iuFNjO5qgQob6IH.png" alt="linux02.png"><br>输出hello world，文件已生成</p><h4 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h4><p><img src="https://s2.loli.net/2023/03/12/2oqrJjKHZfYkW9i.png" alt="linux04.png"><br>命令模式下：</p><p>:wq——保存并退出<br>:q!——强制退出不保存<br>:set nu——设置行号<br>:set nonu——取消行号设置</p><p>一般模式下：</p><p>yy:拷贝当前行<br>4yy:拷贝当前行向下4行<br>p:粘贴<br>dd:删除当前行<br>4dd:删除当前行向下4行<br>G：定位文档末行<br>gg:定位文档首行<br>u:撤销，类似于Windows下的CTRL+Z</p><p><code>还有许多其他快捷方式</code></p><h2 id="常见Linux指令"><a href="#常见Linux指令" class="headerlink" title="常见Linux指令"></a>常见Linux指令</h2><h3 id="关机-amp-重启-amp-登录-amp-注销"><a href="#关机-amp-重启-amp-登录-amp-注销" class="headerlink" title="关机&amp;重启&amp;登录&amp;注销"></a>关机&amp;重启&amp;登录&amp;注销</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>shutdown -h now</td><td>立刻关机</td></tr><tr><td>shutdown -h 1</td><td>一分钟后关机</td></tr><tr><td>shutdown -r now</td><td>立刻重启</td></tr><tr><td>halt</td><td>关机</td></tr><tr><td>reboot</td><td>重启</td></tr><tr><td>sync</td><td>把内存数据同步到磁盘</td></tr><tr><td>su - 用户名</td><td>切换管理员身份</td></tr><tr><td>logout</td><td>注销用户</td></tr></tbody></table><p>注意细节：<br>1.不管重启或是关机，首先运行sync，虽然会自动调用，小心驶得万年船<br>2.logout指令在图形运行级别无效</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>Linux是一个多用户多任务的操作系统</p><p>只有一个root用户，可以创建许多普通用户</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>useradd 用户名</td><td>添加用户</td></tr><tr><td>passwd 用户名</td><td>指定、修改密码</td></tr><tr><td>userdel 用户名</td><td>删除用户，保留家目录</td></tr><tr><td>userdel -r 用户名</td><td>删除用户以及对应主目录</td></tr><tr><td>id 用户名</td><td>查询用户信息</td></tr><tr><td>su - 用户名</td><td>切换用户</td></tr><tr><td>whoami&#x2F;who am i</td><td>查看当前用户&#x2F;登录用户</td></tr></tbody></table><p><img src="https://s2.loli.net/2023/03/12/nIWbwQapUcLty9f.png" alt="whoami.png"></p><p>注意细节:<br>1.创建用户成功后，自动创建与用户名同名家目录，使用该用户登录，自动切换至该用户目录下<br>2.useradd -d 指定目录 用户名，为新创建的用户指定家目录<br>3.从权限高用户切换至权限低用户，无需密码，反之需要<br>4.切换回原来用户时，使用exit&#x2F;logout指令</p><h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><p>类似于角色，系统可以对有共性&#x2F;权限的多个用户进行统一的管理</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>groupadd 组名</td><td>新增组</td></tr><tr><td>groupdel 组名</td><td>删除组</td></tr><tr><td>useradd -g 用户组 用户名</td><td>增加用户时直接加上指定组</td></tr><tr><td>usermod -g 用户组 用户名</td><td>修改用户的组</td></tr></tbody></table><p>通过分组方式，给组赋予权限，组内用户都拥有该权限<br>不指定组，创建同名组，并加入改组<br>一个用户只能属于一个组？</p><h5 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h5><p>&#x2F;etc&#x2F;passwd文件<br>user配置文件，记录用户各种信息<br>用户名：口令：用户标记号：组标记号：注释性描述：主目录：登录shell</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oseasy:x:1000:1000:oseasy,,,:/home/oseasy:/bin/bash</span><br></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;shadow<br>口令配置文件<br>登录名：加密口令：……</p><p>&#x2F;etc&#x2F;group<br>组的配置文件，包含Linux组的信息</p><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>0：关机<br>1：单用户<br>2：多用户无网络<br>3：多用户有网络服务<br>4：保留<br>5：图形界面<br>6：重启</p><p>常用为3和5</p><p>Ubuntu 18.04 LTS图形界面使用init 3后进入多用户有网络服务，但明显出现乱码问题，init 5试图回到图形界面，报错</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Failed to open /dev/initctl:****</span><br><span class="line">Failed to talk to init daemon.</span><br></pre></td></tr></table></figure><p>似乎就无法调用相关操作和文件了</p><p>好在init 6仍然适用，重启进入默认运行级别回到图形界面</p><h3 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h3><p>对着指令敲，实机操作</p><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><p>man 获得帮助信息</p><p>help 获得shell内置命令的帮助信息</p><h5 id="man和help的区别？"><a href="#man和help的区别？" class="headerlink" title="man和help的区别？"></a>man和help的区别？</h5><p>可通过以下指令自行体会两者区别</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man man</span><br><span class="line">help help</span><br></pre></td></tr></table></figure><p>拓展：<br>在Linux下，隐藏文件以.开头<br>查看目录下的文件使用ls<br>ls -a列出所有，包括隐藏文件<br>ls -l单行显示<br>选项可组合使用，如ls -al，ls -la</p><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>pwd</td><td>显示当前工作目录绝对路径</td></tr><tr><td>ls <code>[选项]</code></td><td>显示目录或文件</td></tr><tr><td>cd <code>[目录]</code></td><td>切换到指定目录</td></tr><tr><td>mkdir <code>[目录]</code></td><td>创建目录</td></tr><tr><td>mkdir -p <code>[目录]</code></td><td>创建多级目录</td></tr><tr><td>rmdir <code>[目录]</code></td><td>删除空目录</td></tr><tr><td>rm -rf <code>[目录]</code></td><td>删除非空目录不提示（删除需谨慎）</td></tr><tr><td>rm -r <code>[文件或目录]</code></td><td>递归删除整个文件夹</td></tr><tr><td>rm -f <code>[文件或目录]</code></td><td>强制删除不提示</td></tr><tr><td>touch <code>[文件]</code></td><td>创建空文件</td></tr><tr><td>cp <code>[选项]</code> source dest</td><td>拷贝文件到指定目录</td></tr><tr><td>mv</td><td>移动文件与目录或重命名</td></tr></tbody></table><h5 id="目录的创建与删除"><a href="#目录的创建与删除" class="headerlink" title="目录的创建与删除"></a>目录的创建与删除</h5><p><img src="https://s2.loli.net/2023/03/12/QoGgFY8df4RwbzX.png" alt="linux-dir.png"></p><p>拓：<br>绝对路径以根目录为起始目录<br>相对路径以当前目录为起始目录</p><p>cd ~或者cd :回到家目录<br>cd ..返回上一级目录</p><p>cp -r source dest递归拷贝目录<br>\cp 同名直接覆盖，不需要问讯</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>折腾日志</title>
      <link href="/2023/03/09/%E6%8A%98%E8%85%BE%E6%97%A5%E5%BF%97/"/>
      <url>/2023/03/09/%E6%8A%98%E8%85%BE%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>折腾日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-03-11</p></div></div><div class='timeline-item-content'><p>新的电源到了，终于可以好好看看这台主机了。由于之前购买硬盘预装了Windows7，先来跑个鲁大师。帧数高达0.9帧，跑分“高达”9万分，击败全国百分之四用户！</p><p>看一下B站视频试试，也算是挺流畅，将清晰度调至1080p，也没有什么压力。就是看视频CPU占用就没低于90过，基本就是100，由于是2G内存条，针对浏览器这种，自然还是占用几乎跑满。</p><p>不过浏览文字，CPU就好像下班了，占用不超过3%，我估计还是因为显卡性能太拉的原因，导致播放视频只能CPU多出点力。</p><p>筹谋许久，就是能在物理机上体验一把Linux的发行版。继上次为pine a64装上armbian系统后，这是我第二次尝试装系统，所选择的系统为Debian。</p><p>仔细看了IT侠的安装系统教程以及在B站看了大量学习教程后，说实话，我还是没底……</p><p>光是系统在那下载我都十分费解（呜呜，确实不知道）在官网这里跳到那里。最后找到一份较为靠谱的教程，也总算是看见了曙光。Debian官网、清华源我都尝试了一下，下载速度都挺慢的。怎么能忘了<a href="https://mirrors.nju.edu.cn/debian-cd/11.6.0/amd64/iso-cd/">NJU镜像源</a>？<br><img src="https://s2.loli.net/2023/03/11/2VayevtRNcFHzgD.png" alt="23.3.11-3.png"><br>我甚至怀疑有没有一秒，几乎是瞬间下载完毕，太香啦。</p><p>其实我是买了专门装系统的U盘的，最近其实入手了几块U盘了，海康的x302s，金士顿的dtkn，铠侠的u301，我也不知道怎么回事，买了一块还想买。u301买来就是打算当装机盘的，不过到手后，官网说只支持win10以上版本还有macOS高版本？我也没理解他说的啥意思。其实想来，我身边还有一块随我几年的老兵。从高中时就服役了，里面也几乎没有资料。但容量只有可怜的4GB，不过看我找到的那篇教程，4G也够用了。所以权衡之下，这次实验还是得牺牲他了。</p><p>镜像写入工具采用的是IT侠推荐的软碟通。在耗费了两个多小时后，终于装上了系统。（也算是借此机会学习了一下装机吧）期间还出了点状况，缺少rtl_nic&#x2F;rtl8168e-3.fw固件，好像是因为这是non-free的？好在在Debian官网找到相关<a href="https://packages.debian.org/bullseye/firmware-realtek">网卡固件</a>，插入另一U盘补齐固件问题得以解决。</p><p>不得不讲，系统安装是真慢，即使换了南大镜像，也花费了两个多小时。桌面环境采用Xfce，听说它极度轻便。至此，可以开始体验Debian系统了。</p><p>不得不说，界面可以用简陋来形容（当然换了壁纸感觉舒畅不少）<br><img src="https://s2.loli.net/2023/03/11/Av9grYhWwzDuHEL.png" alt="first.png"><br>打开火狐，观看B站，1080p下比我想象的糟糕，卡顿较为严重。调整桌面图标时，搞不懂每次点开怎么都要抖一下。自带的vi编辑器也是用的让我怀疑人生，测试了一下网速，只有100出头，要知道win7下可以跑700-800，十分奇怪，而且延迟抖动也有些严重。是我什么地方没配好？我不理解。</p><p>初步体验下来，我觉得它甚至没有Windows7轻便，不适应的地方也有很多，不过或许也只是我还没真正了解这款伟大的操作系统，还没有能够将它调试的很好，还没有足够的Linux知识储备……</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-03-09</p></div></div><div class='timeline-item-content'><p>dc电源可能确实老化了也不知咋地，接头处都冒烟了，也不敢用喽。宿舍其余人已将我列为危险分子了。又要开销一笔，难受。计划是给它装一个实机的Debian，虽然感觉它现在运行Windows7也挺流畅的，不过买来就是体验Linux的妙用的。希望能倒腾出些乐趣吧。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-02-19</p></div></div><div class='timeline-item-content'><p>小黄鱼购得的1037u小主机到了，同时到的还有淘宝购入的一块机械硬盘，我傻逼了，之前没问清楚，他预留的硬盘位是2.5寸的硬盘和一个msata。甚至卖家SATA供电线都没给我，恼！更想不到的是通电之后没反应，不过好在后来解决了，也成功进入了bios。不过适配器接头处碰了一下之后就有明显电流滋滋声。又买了块msata，等两天吧。往垃圾上加垃圾真是件令人心痛的事。</p><p>接口方面，两个usb3.0，两个usb2.0，两个sata接口，一个msata接口，一个千兆网口，一个vga接口，一个HDMI接口，也算是接口齐全吧。</p><p>第一次当垃圾佬，啧啧啧。当时以为捡了个漏，现在看来，市面上还有一个全部配件齐全包括电源、无线网卡，32g固态，250g机械的也才160包邮，或许之前应该去买那个的。</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 垃圾回收站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据链路层</title>
      <link href="/2022/11/24/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2022/11/24/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p><img src="https://s2.loli.net/2023/03/10/AG82roydpSb1UPZ.png" alt="计算机网络3.png"></p><!-- ![数据链路层](https://git.nju.edu.cn/211250026/picture/-/raw/main/blog_picture/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3.png) --><p>详细思维导图见<a href="https://kdocs.cn/l/cfBHZy8bqWls">https://kdocs.cn/l/cfBHZy8bqWls</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp面向对象</title>
      <link href="/2022/11/24/Cpp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/11/24/Cpp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网物理层</title>
      <link href="/2022/11/19/%E8%AE%A1%E7%BD%91%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2022/11/19/%E8%AE%A1%E7%BD%91%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络物理层"><a href="#计算机网络物理层" class="headerlink" title="计算机网络物理层"></a>计算机网络物理层</h1><p><img src="https://s2.loli.net/2023/03/10/aTWJscEbKfv5jry.png" alt="计网物理层"></p><!-- ![计网物理层](https://git.nju.edu.cn/211250026/picture/-/raw/main/blog_picture/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C2.png) --><p>详细思维导图见<a href="https://kdocs.cn/l/cdEZrFdWdHtj">https://kdocs.cn/l/cdEZrFdWdHtj</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp-STL</title>
      <link href="/2022/11/13/Cpp-STL/"/>
      <url>/2022/11/13/Cpp-STL/</url>
      
        <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="什么是STL？"><a href="#什么是STL？" class="headerlink" title="什么是STL？"></a>什么是STL？</h2><p>C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>向量：与数组十分相似，唯一不同的是，向量在需要扩展大小的时候，会自动处理它自己的存储需求，相当于一个自动的动态数组</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;vector&gt;</span><br></pre></td></tr></table></figure><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>vector.push_back(T)</td><td></td></tr></tbody></table><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>队列：先进先出的一种结构，就类似于生活中排队打饭，排在排头的人先打到饭菜离开</p><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;queue&gt;</span><br></pre></td></tr></table></figure><h3 id="基本方法-1"><a href="#基本方法-1" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>queue.pop()</td><td>弹出队首的元素</td></tr><tr><td>queue.push(T)</td><td>队尾加入一个元素</td></tr><tr><td>queue.front()</td><td>队首元素</td></tr><tr><td>queue.empty()</td><td>队列是否为空</td></tr><tr><td>queue.size()</td><td>队列的大小</td></tr><tr><td>queue.back()</td><td>队尾元素</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一行内输入一串整数，以0结束，以空格间隔。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照输入顺序输出这一串数字，以空格间隔</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12 26 3 10 20 0</span><br></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12 26 3 10 20</span><br></pre></td></tr></table></figure><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先进先出，使用队列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span><span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;<span class="comment">//初始化队列 </span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; cnt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt[i] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">push</span>(cnt[i]);<span class="comment">//队尾加入元素 </span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;<span class="comment">//判断队列是否为空</span></span><br><span class="line">cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出队首元素</span></span><br><span class="line">q.<span class="built_in">pop</span>();<span class="comment">//弹出队首元素 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12 26 3 10 20 0</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12 26 3 10 20</span><br></pre></td></tr></table></figure><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>双队列：不同于queue，双队列的队首以及队尾均可对元素进行增删改查</p><h3 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;deque&gt;</span><br></pre></td></tr></table></figure><h3 id="基本方法-2"><a href="#基本方法-2" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>基本操作</th><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>插入操作</td><td>deque.push_front(T)</td><td>队首插入元素</td></tr><tr><td></td><td>deque.push_back(T)</td><td>队尾插入元素</td></tr><tr><td></td><td>deque.insert(pos, val)</td><td>指定位置pos，插入元素val</td></tr><tr><td></td><td>deque.insert(pos, n, val)</td><td>在指定位置pos插入n个元素val</td></tr><tr><td></td><td>deque.insert(pos, deque2.begin(), deque2.end())</td><td>在pos位置插入另一个队列（左闭右开）</td></tr><tr><td>删除操作</td><td>deque.pop_front()</td><td>弹出队首元素</td></tr><tr><td></td><td>deque.pop_back()</td><td>弹出队尾元素</td></tr><tr><td></td><td>deque.clear()</td><td>清空队列所有元素</td></tr><tr><td></td><td>deque.erase(pos)</td><td>删除pos对应位置数据</td></tr><tr><td></td><td>deque.erase(begin, end)</td><td>删除该区间上的元素（左闭右开）</td></tr><tr><td>存取操作</td><td>deque.back()</td><td>访问队尾元素</td></tr><tr><td></td><td>deque.front()</td><td>访问队首元素</td></tr><tr><td></td><td><code>deque.at</code>(index)</td><td>访问指定下标的元素</td></tr><tr><td></td><td>deque[<code>i</code>]</td><td>访问指定下标元素</td></tr><tr><td>容量操作</td><td>deque.empty()</td><td>判断是否为空</td></tr><tr><td></td><td>deque.size()</td><td>双队列中元素的个数</td></tr><tr><td></td><td>deque.resize(num)</td><td>重新指定双队列的大小，不足以默认值填充，超过删除超过部分</td></tr><tr><td></td><td>deque.resize(num, val)</td><td>重新指定双队列的大小，不足以val填充，超过删除超过部分</td></tr><tr><td>排序操作</td><td>sort(itr.begin(), itr.end())</td><td>对其中元素进行排序</td></tr></tbody></table><h3 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h3><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>一行输入一个数字N用于表示数组大小，输入N个数字</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>以双向列表的形式通过三种不同方式输出数组中所有元素</p><h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">10 6 260 1000 36 0</span><br></pre></td></tr></table></figure><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 6 260 1000 36 0</span><br><span class="line">10 6 260 1000 36 0</span><br><span class="line">10 6 260 1000 36 0</span><br></pre></td></tr></table></figure><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span><span class="comment">//头文件 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d;<span class="comment">//初始化双向队列 </span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="type">int</span> *n = <span class="keyword">new</span> <span class="type">int</span>[num];<span class="comment">//new 一块内存空间申请动态数组 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n[i];</span><br><span class="line">d.<span class="built_in">push_back</span>(n[i]);<span class="comment">//双队列结尾插入元素 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; d.<span class="built_in">size</span>(); i++)<span class="comment">//获取双向队列中元素个数 </span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d[i] &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//以下标方式访问元素 </span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; d.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//以at方式访问元素 </span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(deque&lt;<span class="type">int</span>&gt;::iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)<span class="comment">//迭代器 </span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//以迭代器方式访问元素 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">10 6 260 1000 36 0</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 6 260 1000 36 0</span><br><span class="line">10 6 260 1000 36 0</span><br><span class="line">10 6 260 1000 36 0</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>栈：先进后出的一种结构，现实生活中类似于从下至上叠加椅子，将椅子从上至下取下的过程</p><h3 id="头文件-3"><a href="#头文件-3" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stack&gt;</span><br></pre></td></tr></table></figure><h3 id="基本方法-3"><a href="#基本方法-3" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>stack.pop()</td><td>弹栈</td></tr><tr><td>stack.push(T)</td><td>压栈</td></tr><tr><td>stack.top()</td><td>栈顶元素</td></tr><tr><td>stack.empty()</td><td>栈是否为空</td></tr><tr><td>stack.size()</td><td>栈的大小</td></tr></tbody></table><h3 id="数字游戏"><a href="#数字游戏" class="headerlink" title="数字游戏"></a>数字游戏</h3><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>一行内输入一串整数，以 0 结束，以空格间隔。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>一行内倒着输出这一串整数，以空格间隔。</p><h4 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h4><h5 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 65 23 5 34 1 30 0</span><br></pre></td></tr></table></figure><h5 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 1 34 5 23 65 3</span><br></pre></td></tr></table></figure><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先进后出，经典栈结构</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;<span class="comment">//定义栈</span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; cnt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt[i] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="built_in">push</span>(cnt[i]);<span class="comment">//压栈</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;<span class="comment">//判断栈是否为空</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出栈顶元素</span></span><br><span class="line">s.<span class="built_in">pop</span>();<span class="comment">//弹栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 65 23 5 34 1 30 0</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 1 34 5 23 65 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp基础</title>
      <link href="/2022/11/10/Cpp%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/11/10/Cpp%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="I-x2F-O头文件"><a href="#I-x2F-O头文件" class="headerlink" title="I&#x2F;O头文件"></a>I&#x2F;O头文件</h2><table><thead><tr><th align="center">头文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>&lt;iostream&gt;</code></td><td align="center">包含标准输入流cin、标准输出流cout、非缓冲标准错误流cerr和缓冲标准错误流clog。</td></tr><tr><td align="center"><code>&lt;iomanip&gt;</code></td><td align="center">通过所谓的参数化的流操纵器（比如 setw 和 setprecision），来声明对执行标准化 I&#x2F;O 有用的服务</td></tr><tr><td align="center"><code>&lt;fstream&gt;</code></td><td align="center">为用户控制的文件处理声明服务</td></tr></tbody></table><p>注：该表格取自菜鸟教程</p><p>下面来看一个标准输入输出的例子（平时也会大量使用）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;<span class="comment">//标准输入num</span></span><br><span class="line">    cout &lt;&lt; num &lt;&lt; endl;<span class="comment">//标准输出num</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网概述</title>
      <link href="/2022/11/05/%E8%AE%A1%E7%BD%91%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/11/05/%E8%AE%A1%E7%BD%91%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h1><p>ps:计网的知识点实在是太多太细了，写成markdown语法估计得写破防，本思维导图参考自6f老师讲课以及学长笔记。<br><img src="https://s2.loli.net/2023/03/10/jpcYFGzQeVqnmBU.png" alt="计算机网络概述.png"><br>详细思维导图见<a href="https://kdocs.cn/l/ccCKYkCIm50j">https://kdocs.cn/l/ccCKYkCIm50j</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/2022/11/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/11/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记</title>
      <link href="/2022/10/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是HTML语言"><a href="#什么是HTML语言" class="headerlink" title="什么是HTML语言"></a>什么是HTML语言</h3><p> 超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言<br> HTML语言不是一种编程语言，而是一种标签语言（类似于markdown语法）<br> 标记语言是一套标记标签</p><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><p> 通常成对出现，分为开始标签和结束标签，当然也有单独出现的标签比如<code>&lt;br /&gt;</code></p><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p> HTML 标题（Heading）是通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 标签来定义的<br> 一共有六级标题，文字加粗，依次大小减小</p><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p> HTML 段落是通过标签 <code>&lt;p&gt;</code> 来定义的<br> 段与段之间有较大的间距</p><h3 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h3><p>HTML 换行 (Break) 是通过标签<code>&lt;br /&gt;</code> 来定义的<br>单标签，即使 <code>&lt;br&gt;</code> 在所有浏览器中都是有效的，但使用 <code>&lt;br /&gt;</code> 其实是更长远的保障</p><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><p>突出重要性，粗体、斜体、下划线等效果</p><table><thead><tr><th align="center">语义</th><th align="center">标签</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center"><code>&lt;strong&gt;&lt;/strong&gt;</code> 或者 <code>&lt;b&gt;&lt;/b&gt;</code></td><td align="center">推荐使用<code>&lt;strong&gt;</code></td></tr><tr><td align="center">倾斜</td><td align="center"><code>&lt;em&gt;&lt;/em&gt;</code> 或者 <code>&lt;i&gt;&lt;/i&gt;</code></td><td align="center">推荐使用<code>&lt;em&gt;</code></td></tr><tr><td align="center">删除线</td><td align="center"><code>&lt;del&gt;&lt;/del&gt;</code> 或者 <code>&lt;s&gt;&lt;/s&gt;</code></td><td align="center">推荐使用<code>&lt;del&gt;</code></td></tr><tr><td align="center">下划线</td><td align="center"><code>&lt;ins&gt;&lt;/ins&gt;</code> 或者 <code>&lt;u&gt;&lt;/u&gt;</code></td><td align="center">推荐使用<code>&lt;ins&gt;</code></td></tr></tbody></table><h3 id="lt-div-gt-和-lt-span-gt-标签"><a href="#lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="&lt;div&gt; 和 &lt;span&gt; 标签"></a><code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 标签</h3><p><code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 都没有语义，用来装内容的盒子,可以用于网页的布局<br><code>&lt;div&gt;</code>布局，一行只能放一个，大盒子<br><code>&lt;span&gt;</code>布局，一行可以放多个，小盒子</p><h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><p>HTML 图像 (image) 是通过标签<code>&lt;img&gt;</code> 来定义的</p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">图片路径</td><td align="center">必须属性</td></tr><tr><td align="center">alt</td><td align="center">文本</td><td align="center">图像不能正常显示时，替换的文本</td></tr><tr><td align="center">title</td><td align="center">文本</td><td align="center">鼠标置于图像上显示出的文字，提示的文本</td></tr><tr><td align="center">width</td><td align="center">像素</td><td align="center">宽度</td></tr><tr><td align="center">height</td><td align="center">像素</td><td align="center">高度</td></tr><tr><td align="center">border</td><td align="center">像素</td><td align="center">边框粗细</td></tr><tr><td align="center">宽度和高度可以只设定一个，等比例缩放</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">属性之间没有先后顺序，但要以空格间隔开来，采取键值对的形式，属性&#x3D;”属性值”</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p><code>&lt;a&gt;</code>标签</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">href</td><td align="center">用于指定链接目标的url（必须属性）</td></tr><tr><td align="center">target</td><td align="center">用于指定链接页面的打开方式，其中_self为默认值，在原窗口打开链接，_blank为在新窗口中打开方式</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
